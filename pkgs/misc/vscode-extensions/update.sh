#! /usr/bin/env nix-shell
#! nix-shell -i bash -p curl jq unzip

# This script is heavily based on pkgs/misc/vscode-extensions/update_installed_exts.sh
# Probably it should be written with more robust technologies/language.

# NOTE: it uses naive methods, it is just a prototype.

WHITELIST=./simple-extensions.txt
WORKING_FILE=./generated.nix

function make_meta_field() {
    FIELD="$1"
    VAL="$2"

    [ "$VAL" = "null" ] && echo "" || echo "\n      $FIELD = \"$VAL\";"
}

function log() {
    echo "$@" >&2
}

# TODO SIGINT
function halt() {
    [ -d "$EXT_TMPDIR" ] && log "Cleaning $EXT_TMPDIR" && rm -rf $EXT_TMPDIR
    exit 1
}

function get_vsixpkg() {
    EXT_ID="$1"
    LICENSE="$2"
    echo "Processing $EXT_ID license=$LICENSE" >&2

    OWNER=$(echo "$EXT_ID" | cut -d. -f1)
    EXT=$(echo "$EXT_ID" | cut -d. -f2)

    # Create a tempdir for the extension download
    EXT_TMPDIR=$(mktemp -d -t vscode_exts_XXXXXXXX)
    URL="https://$OWNER.gallery.vsassets.io/_apis/public/gallery/publisher/$OWNER/extension/$EXT/latest/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage"

    # Quietly but delicately curl down the file, blowing up at the first sign of trouble.
    curl --silent --show-error --fail -X GET -o "$EXT_TMPDIR/$EXT_ID.zip" "$URL"

    JSON_PACKAGE=$(unzip -qc "$EXT_TMPDIR/$EXT_ID.zip" "extension/package.json") || halt

    VER=$(jq -r '.version' <<<"$JSON_PACKAGE")
    [ "$VER" == "null" ] && log "Cannot get version from downloaded extension (ver=$VER)" && halt

    HOMEPAGE_VAL=$(jq -r '.homepage' <<<$JSON_PACKAGE)
    DESCRIPTION_VAL=$(jq -r '.description' <<<"$JSON_PACKAGE")
    REPOSITORY_URL_VAL=$(jq -r '.repository.url' <<<"$JSON_PACKAGE")

    DESCRIPTION=`make_meta_field "description" "$DESCRIPTION_VAL"`
    HOMEPAGE=`make_meta_field "homepage" "$HOMEPAGE_VAL"`
    [ "$HOMEPAGE" = "" ] && HOMEPAGE=`make_meta_field "homepage" "$REPOSITORY_URL_VAL"`

    # Calculate the SHA
    SHA=$(nix-hash --flat --base32 --type sha256 "$EXT_TMPDIR/$EXT_ID.zip")

    # Clean up.
    rm -Rf "$EXT_TMPDIR"

    # TODO maybe we want to parse extension.vsixmanifest (xml) which contains version and other metadata?
    cat <<-EOF
  $EXT_ID = buildVscodeMarketplaceExtension {
    mktplcRef = {
      name = "$EXT";
      publisher = "$OWNER";
      version = "$VER";
      sha256 = "$SHA";
    };
    meta = {
      license = $LICENSE;`echo -e "$DESCRIPTION"``echo -e "$HOMEPAGE"`
    };
  };

EOF

}

######################### Generator

echo '# This file has been generated by ./pkgs/misc/vscode-extensions/update.sh
{ stdenv, vscode-utils }:
let
  inherit (vscode-utils) buildVscodeMarketplaceExtension;
in with stdenv.lib;
{
' > $WORKING_FILE

# Just simple parsing, we expect extension id or comment lines, or white space line
while read -r line; do
    case "$line" in
         "" | \#*) # skip lines with only whitespaces, also line which has white spaced prefix followed by #
              ;;
           *)
               get_vsixpkg $line
               ;;
    esac
done < "$WHITELIST" >> $WORKING_FILE

echo '}' >> $WORKING_FILE

#mv "$WORKING_FILE" generated.nix
